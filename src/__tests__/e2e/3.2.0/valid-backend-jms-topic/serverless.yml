service: serverless-wso2-apim
provider:
  name: aws
plugins:
  localPath: '../../../../../'
  modules:
    - src

#⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇ Modify the configuration below to suit your test case.
#⬇⬇⬇ START HERE ⬇⬇⬇⬇ Help: https://github.com/ramgrandhi/serverless-wso2-apim#configuration-reference
#⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇⬇ For a full list of env vars that you can use, refer `src/__tests__/e2e/e2e.test.js`
custom:
  wso2apim:
    enabled: true
    host: ${env:WSO2_HOST}
    port: ${env:WSO2_PORT}
    user: ${env:WSO2_USER}
    pass: ${env:WSO2_PASS}
    gatewayEnv: ${env:WSO2_ENV}
    apidefs:
      - name: ${env:TEST_ID}-1
        description: ${env:TEST_ID}-1
        rootContext: /${env:TEST_ID}-1
        version: 'v1'
        visibility: 'PRIVATE'
        backend:
          jms:
            destination: 'MY.JMS.TOPIC'
            parameters:
              java.naming.provider.url: 'tcp://my-jms-server:61616'
              java.naming.factory.initial: 'org.apache.activemq.jndi.ActiveMQInitialContextFactory'
              transport.jms.ConnectionFactoryJNDIName: 'TopicConnectionFactory'
              java.naming.security.principal: 'jndi-user'
              java.naming.security.credentials: 'jndi-pass'
              transport.jms.ContentTypeProperty: 'Content-Type'
        maxTps: 10
        tags:
          - ${env:TEST_ID}-1
        swaggerSpec:
          openapi: 3.0.0
          info:
            title: ${env:TEST_ID}-1
            version: "v1"
            contact:
              name: ${env:TEST_ID}-1
              email: ${env:TEST_ID}-1
          paths:
            /*:
              post:
                responses:
                  "201":
                    description: Created
                x-auth-type: 'None'
